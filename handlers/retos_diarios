from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime

DAILY_CHALLENGES = {
    0: {
        "title": "Lunes de Directores",
        "description": "Menciona una pel√≠cula de cualquier director europeo.",
        "keywords": ["bergman", "fellini", "tarkovsky", "godard", "truffaut", "antonioni", "bu√±uel"],
        "bonus_points": 5
    },
    1: {
        "title": "Martes Mexicano",
        "description": "Comparte o recomienda una pel√≠cula hecha en M√©xico.",
        "keywords": ["mexico", "mexicana", "gael garc√≠a", "cuar√≥n", "del toro", "inemex", "cine mexicano"],
        "bonus_points": 5
    },
    2: {
        "title": "Mi√©rcoles de Rese√±a",
        "description": "Escribe una rese√±a con al menos 50 palabras.",
        "min_words": 50,
        "hashtag": "#rese√±a",
        "bonus_points": 5
    },
    3: {
        "title": "Jueves de Cine Asi√°tico",
        "description": "Recomienda cine de Jap√≥n, Corea, China o alrededores.",
        "keywords": ["jap√≥n", "corea", "china", "taiw√°n", "hong kong", "kim ki duk", "kurosawa", "park chan wook"],
        "bonus_points": 5
    },
    4: {
        "title": "Viernes Emocional",
        "description": "Comparte una pel√≠cula que te haya hecho llorar.",
        "keywords": ["llor√©", "emotiva", "triste", "emocionante", "drama"],
        "bonus_points": 5
    },
    5: {
        "title": "S√°bado de Cr√≠tica",
        "description": "Publica una cr√≠tica afilada (100+ palabras).",
        "min_words": 100,
        "hashtag": "#cr√≠tica",
        "bonus_points": 5
    },
    6: {
        "title": "Domingo de Debate",
        "description": "Abre una pregunta o debate sobre cine.",
        "keywords": ["qu√© opinan", "ustedes creen", "por qu√©", "deber√≠a", "mejor director"],
        "bonus_points": 5
    }
}

def get_today_challenge():
    return DAILY_CHALLENGES.get(datetime.now().weekday())

async def cmd_retodiario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reto = get_today_challenge()
    if not reto:
        await update.message.reply_text("‚ùå No hay reto para hoy.")
        return

    msg = (
        f"üìÖ *Reto Diario: {reto['title']}*\n\n"
        f"üé¨ {reto['description']}\n"
        f"üí∞ Recompensa: +{reto['bonus_points']} puntos\n"
        f"‚è≥ Solo hoy.\n\n"
        f"Usa un hashtag como `#aporte`, `#rese√±a`, `#cr√≠tica` o `#recomendaci√≥n` para participar."
    )
    await update.message.reply_text(msg, parse_mode="Markdown")
